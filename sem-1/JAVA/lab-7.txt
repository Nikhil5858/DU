//1
class Student {
    int id_no;
    int no_of_subjects_registered;
    String[] subject_code;
    int[] subject_credits;
    char[] grade_obtained;
    double spi;

    // Constructor
    Student(int id_no, int no_of_subjects_registered) {
        this.id_no = id_no;
        this.no_of_subjects_registered = no_of_subjects_registered;
        subject_code = new String[no_of_subjects_registered];
        subject_credits = new int[no_of_subjects_registered];
        grade_obtained = new char[no_of_subjects_registered];
    }

    // Method to calculate SPI
    void calculate_spi() {
        double total_credits = 0;
        double total_points = 0;

        for (int i = 0; i < no_of_subjects_registered; i++) {
            int credits = subject_credits[i];
            char grade = grade_obtained[i];
            double points = 0;

            switch (grade) {
                case 'O':
                    points = 10;
                    break;
                case 'A+':
                    points = 9;
                    break;
                case 'A':
                    points = 8;
                    break;
                case 'B+':
                    points = 7;
                    break;
                case 'B':
                    points = 6;
                    break;
                default:
                    points = 0;
            }

            total_credits += credits;
            total_points += points * credits;
        }

        spi = total_points / total_credits;
    }

    // Method to display student data
    void display_data() {
        System.out.println("ID No: " + id_no);
        System.out.println("No of Subjects Registered: " + no_of_subjects_registered);
        System.out.println("Subjects:");
        for (int i = 0; i < no_of_subjects_registered; i++) {
            System.out.println("Code: " + subject_code[i] + ", Credits: " + subject_credits[i] + ", Grade: " + grade_obtained[i]);
        }
        System.out.println("SPI: " + spi);
    }
}


// Derived class: StudentData
class StudentData extends Student {
    StudentData(int id_no, int no_of_subjects_registered) {
        super(id_no, no_of_subjects_registered);
    }

    // Method to input student data
    void input_data() {
        for (int i = 0; i < no_of_subjects_registered; i++) {
            System.out.print("Enter subject code " + (i + 1) + ": ");
            subject_code[i] = Main.sc.next();
            System.out.print("Enter subject credits " + (i + 1) + ": ");
            subject_credits[i] = Main.sc.nextInt();
            System.out.print("Enter grade obtained in subject " + (i + 1) + ": ");
            grade_obtained[i] = Main.sc.next().charAt(0);
        }
    }
}


// Main class
public class Main {
    static java.util.Scanner sc = new java.util.Scanner(System.in);

    public static void main(String[] args) {
        System.out.print("Enter number of students: ");
        int n = sc.nextInt();

        StudentData[] students = new StudentData[n];

        for (int i = 0; i < n; i++) {
            System.out.print("Enter ID No of student " + (i + 1) + ": ");
            int id_no = sc.nextInt();
            System.out.print("Enter number of subjects registered by student " + (i + 1) + ": ");
            int no_of_subjects_registered = sc.nextInt();

            students[i] = new StudentData(id_no, no_of_subjects_registered);
            students[i].input_data();
            students[i].calculate_spi();
            students[i].display_data();
            System.out.println();
        }
    }
}




//2
class Book {
    private String author_name;

    Book(String author_name) {
        this.author_name = author_name;
    }

    String getAuthorName() {
        return author_name;
    }

    void displayPublication() {
        System.out.println("Author: " + author_name);
    }
}


// Subclass: BookPublication
class BookPublication extends Book {
    private String title;

    BookPublication(String author_name, String title) {
        super(author_name);
        this.title = title;
    }

    @Override
    void displayPublication() {
        super.displayPublication();
        System.out.println("Book Title: " + title);
    }
}


// Subclass: PaperPublication
class PaperPublication extends Book {
    private String title;

    PaperPublication(String author_name, String title) {
        super(author_name);
        this.title = title;
    }

    @Override
    void displayPublication() {
        super.displayPublication();
        System.out.println("Paper Title: " + title);
    }
}


// Main class
public class Publication {
    public static void main(String[] args) {
        if (args.length < 4) {
            System.out.println("Usage: java Publication <author_name> <publication_type> <title> [<author_name> <publication_type> <title>...]");
            return;
        }

        int numPublications = args.length / 3;

        Book[] publications = new Book[numPublications];

        for (int i = 0; i < numPublications; i++) {
            String author_name = args[i * 3];
            String publication_type = args[i * 3 + 1];
            String title = args[i * 3 + 2];

            if (publication_type.equalsIgnoreCase("book")) {
                publications[i] = new BookPublication(author_name, title);
            } else if (publication_type.equalsIgnoreCase("paper")) {
                publications[i] = new PaperPublication(author_name, title);
            } else {
                System.out.println("Invalid publication type: " + publication_type);
            }
        }

        for (Book publication : publications) {
            publication.displayPublication();
            System.out.println();
        }
    }
}



//3

class Animal {
    String name;

    Animal(String name) {
        this.name = name;
    }

    void sound() {
        System.out.println("Animal makes a sound");
    }
}


// Dog class (child) extending Animal
class Dog extends Animal {
    Dog(String name) {
        super(name); // Calls Animal's constructor
    }

    @Override
    void sound() {
        super.sound(); // Calls Animal's sound() method
        System.out.println("Dog barks");
    }

    void displayInfo() {
        System.out.println("Name: " + super.name); // Accesses Animal's name field
    }
}


public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Max");
        myDog.sound();
        myDog.displayInfo();
    }
}




//4

public class Main {
    public static void main(String[] args) {
        final int MAX_SIZE = 10;
        // MAX_SIZE = 20; // Error: Cannot assign a value to final variable MAX_SIZE
        System.out.println(MAX_SIZE);
    }
}



- Once assigned, a final variable's value cannot be changed.


2. Final Methods



class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    // void sound() { // Error: Cannot override the final method from Animal
    //     System.out.println("Dog barks");
    // }
}



- A final method cannot be overridden in subclasses.


3. Final Classes



final class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

// class Dog extends Animal { // Error: Cannot inherit from final 'Animal'
// }



- A final class cannot be subclassed.


4. Final Parameters



void displayInfo(final String name) {
    // name = "John"; // Error: Cannot assign a value to final parameter name
    System.out.println(name);
}



- Final parameters cannot be reassigned within a method.


5. Final Blocks (Blank Final)



class Animal {
    final int size;
    {
        size = 10; // Initialization block for blank final variable
    }
}



//5

class Member {
    String name;
    int age;
    String phoneNumber;
    String address;
    double salary;

    Member(String name, int age, String phoneNumber, String address, double salary) {
        this.name = name;
        this.age = age;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.salary = salary;
    }

    void printSalary() {
        System.out.println("Salary: " + salary);
    }

    void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Phone Number: " + phoneNumber);
        System.out.println("Address: " + address);
    }
}


// Subclass: Employee
class Employee extends Member {
    String specialization;

    Employee(String name, int age, String phoneNumber, String address, double salary, String specialization) {
        super(name, age, phoneNumber, address, salary);
        this.specialization = specialization;
    }

    void displayInfo() {
        super.displayInfo();
        System.out.println("Specialization: " + specialization);
        printSalary();
    }
}


// Subclass: Manager
class Manager extends Member {
    String department;

    Manager(String name, int age, String phoneNumber, String address, double salary, String department) {
        super(name, age, phoneNumber, address, salary);
        this.department = department;
    }

    void displayInfo() {
        super.displayInfo();
        System.out.println("Department: " + department);
        printSalary();
    }
}


public class Main {
    public static void main(String[] args) {
        // Create Employee object
        Employee employee = new Employee("John Doe", 30, "1234567890", "123 Main St", 50000.0, "Software Development");
        System.out.println("Employee Information:");
        employee.displayInfo();
        System.out.println();

        // Create Manager object
        Manager manager = new Manager("Jane Smith", 40, "9876543210", "456 Elm St", 80000.0, "Marketing");
        System.out.println("Manager Information:");
        manager.displayInfo();
    }
}
